#!/usr/bin/env perl

use Data::Dumper;

use Sensors::Http;
use Exporter 'import';
use Logger;

my @sensors;
my $logger = Logger->new();

sub requireClass {
    my ($class) = @_;
    (my $file = $class) =~ s|::|/|g;
    $file .= '.pm';
    require $file;
}

sub readConfig {
  my $path = "monitor.cfg";
  my $fd;
  open $fd, "<$path" || die "Unable to open configuration file: $path";
  while (my $line = <$fd> ) {
    chomp $line;
    my @fields = split(/\s+/, $line);
    my $type = shift @fields;
    my $period = shift @fields;

    my $class = "Sensors::".$type;
    requireClass($class);

    my $sensor = {
      type        => $type,
      period      => $period,
      timestamp   => 0,
      parameters  => \@fields,
      obj         => $class->new()
    };

    $sensor->{obj}->configure(@{$sensor->{parameters}});
    $sensor->{obj}->setLogger($logger);
    
    # print Dumper($sensor);
    
    push @sensors, $sensor;
  }
}

sub sleepUntilNextEvent {
  my $timeReference = shift;
  my $result = 0;
  foreach my $sensor (@sensors) {
    my $nextTime = $sensor->{timestamp} + $sensor->{period};
    my $delta = $nextTime - $timeReference;
    if ( $delta < $result || ! $result ) {
      $result = $delta;
    }
  }
  sleep $result;
}

sub runSensors {
  my $timeReference = shift;
  croak if ! $timeReference;
  foreach my $sensor (@sensors) {
    if ( (  $timeReference - $sensor->{timestamp} ) >= $sensor->{period} ) {
      $sensor->{obj}->do();
      $sensor->{timestamp} = $timeReference;
    }
  }
}

sub run {
  while (1) {
    my $timeReference = time();
    runSensors($timeReference);    
    sleepUntilNextEvent($timeReference);
  }
}

readConfig();
run();
